import java.nio.file.Files
import java.nio.file.StandardCopyOption
import java.nio.file.Paths
// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
       google()
       jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
        
    }
}
allprojects {
    repositories {
        google()
        jcenter()
    }
    buildDir "/home/m4zz31/Snapchat/Dev/spectacles-native-sdk/SampleCode/CubeSample/CubeSample/apk_bundle_CubeSample/aar"
}

ext {
    androidVersion = "android-28".split("-")[1].toInteger()
}

apply plugin: 'com.android.library'



android {
    // Newer versions of Gradle do not detect the NDK path properly
    ndkPath "/home/m4zz31/Android/Sdk/ndk/23b"
    compileSdkVersion androidVersion
    defaultConfig {
        minSdkVersion androidVersion
        targetSdkVersion androidVersion
        ndk {
             abiFilters "arm64-v8a"
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            jniLibs.srcDirs = ['../libs']
            def assetsFolder = new File('../assets')
            if (assetsFolder.exists()) {
                assets.srcDirs = ['../assets']
            }
            def resFolder = new File('../res')
            if (resFolder.exists()) {
                res.srcDirs = ['../res']
            }
            // res.srcDir '/home/m4zz31/Snapchat/Dev/spectacles-native-sdk/vos-app-kit-android/resources/res'
        }
    }
}
dependencies {
    
    implementation fileTree(include: ['*.jar'], dir: '../libs')
}

android.libraryVariants.all { variant ->
    def maprovi = variant.mergeAssetsProvider
    def pap = variant.packageLibraryProvider

     maprovi.get().doLast {
        def assetdir = maprovi.get().outputDir.asFile.get()
        def cmdfile = new File(assetdir, "cmd.txt")
        if (cmdfile.exists())
        {
            cmdfile.renameTo new File(assetdir, "cmd-com.snaptech.CubeSample.txt")
        }
        // do not package calibration*.json files
        assetdir.listFiles({it.name ==~ /calibration.*\.json/} as FileFilter).each { it.delete() }
     }

   pap.configure {
        dependsOn maprovi

        def outdir = pap.get().destinationDirectory.asFile.get()
        def oldOutputPath = Paths.get(outdir.toString(), pap.get().archiveFileName)
        def newOutputPath = Paths.get("/home/m4zz31/Snapchat/Dev/spectacles-native-sdk/SampleCode/CubeSample", "CubeSample-2.0.0-${variant.name}.aar")
        doLast {
            Files.copy(oldOutputPath, newOutputPath, StandardCopyOption.REPLACE_EXISTING)
        }
    }
}
