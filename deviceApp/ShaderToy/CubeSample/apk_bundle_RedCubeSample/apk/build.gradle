import java.nio.file.Files
import java.nio.file.StandardCopyOption
import java.nio.file.Paths
// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
       google()
       jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
        
    }
}
allprojects {
    repositories {
        google()
        jcenter()
    }
    buildDir "/home/m4zz31/Snapchat/Dev/spectacles-native-sdk/ShaderToy/ShaderToy/CubeSample/apk_bundle_RedCubeSample/apk"
}

ext {
    androidVersion = "android-28".split("-")[1].toInteger()
    applicationName = "RedCubeSample"
}

apply plugin: 'com.android.application'



// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file('keystore.properties')

// Initialize a new Properties() object called keystoreProperties.
// Load your keystore.properties file into the keystoreProperties object.
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    // Newer versions of Gradle do not detect the NDK path properly
    ndkPath "/home/m4zz31/Android/Sdk/ndk/23b"
    compileSdkVersion androidVersion
    signingConfigs {
        key {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    defaultConfig {
        applicationId "com.snaptech.RedCubeSample"
        minSdkVersion androidVersion
        targetSdkVersion androidVersion
        versionName "2.0.0"
        ndk {
             abiFilters "arm64-v8a"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.key
        }
        debug {
            signingConfig signingConfigs.key
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            jniLibs.srcDirs = ['../libs']
            def assetsFolder = new File('../assets')
            if (assetsFolder.exists()) {
                assets.srcDirs = ['../assets']
            }
            def resFolder = new File('../res')
            if (resFolder.exists()) {
                res.srcDirs = ['../res']
            }
            res.srcDir '/home/m4zz31/Snapchat/Dev/spectacles-native-sdk/vos-app-kit-android/resources/res'
        }
    }
    
}
dependencies {
    
    implementation fileTree(include: ['*.jar'], dir: '../libs')
    def aarFile = ""
    if (aarFile != "")
        implementation files(aarFile)
}

// building asset_dirs file for asset extraction

android.applicationVariants.all { variant ->
    def pap = variant.packageApplicationProvider
    def maprovi = variant.mergeAssetsProvider

    maprovi.get().doLast {
        def assetdir = maprovi.get().outputDir.asFile.get()
        def list = []
        assetdir.eachDirRecurse { file ->
            if (!file.name.startsWith('.')) {
                list << assetdir.relativePath(file)
            }
        }
        def assetIndexFile = new File(assetdir, "asset_dirs")
        assetIndexFile.write list.join(";")

        def cmdfile = new File(assetdir, "cmd.txt")
        if (cmdfile.exists())
        {
            cmdfile.renameTo new File(assetdir, "cmd-${applicationId}.txt")
        }
    }

    pap.configure {
        dependsOn maprovi
        def outdir = it.outputDirectory.getAsFile().get()
        variant.outputs.all { output ->
            def oldOutputPath = Paths.get(outdir.toString(), output.outputFileName)
            def newOutputPath = Paths.get("/home/m4zz31/Snapchat/Dev/spectacles-native-sdk/ShaderToy/ShaderToy", "${applicationName}-${variant.versionName}-${variant.name}.apk")
            doLast {
                Files.copy(oldOutputPath, newOutputPath, StandardCopyOption.REPLACE_EXISTING)
            }
        }
    }
}
